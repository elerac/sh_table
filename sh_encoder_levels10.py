# This code is generated by generate_sh_table.py
# The function `components_from_spherical_harmonics` references the code of nerfstudio (https://github.com/nerfstudio-project/nerfstudio) `nerfstudio/utils/math.py`

import torch
import matplotlib.pyplot as plt


def components_from_spherical_harmonics(levels: int, directions: torch.Tensor) -> torch.Tensor:
    num_components = levels**2
    components = torch.empty((*directions.shape[:-1], num_components), device=directions.device)

    assert 1 < levels <= 10, f"SH levels must be in [1,10], got {levels}"
    assert directions.shape[-1] == 3, f"Direction input should have three dimensions. Got {directions.shape[-1]}"

    x = directions[..., 0]
    y = directions[..., 1]
    z = directions[..., 2]

    xx = x**2
    yy = y**2
    zz = z**2

    # l0
    if levels > 0:
        components[..., 0] = 0.282094791773878

    # l1
    if levels > 1:
        components[..., 1] = 0.48860251190292 * y
        components[..., 2] = 0.48860251190292 * z
        components[..., 3] = 0.48860251190292 * x

    # l2
    if levels > 2:
        components[..., 4] = 1.09254843059208 * x * y
        components[..., 5] = 1.09254843059208 * y * z
        components[..., 6] = -0.94617469575756 * xx - 0.94617469575756 * yy + 0.63078313050504
        components[..., 7] = 1.09254843059208 * x * z
        components[..., 8] = 0.54627421529604 * xx - 0.54627421529604 * yy

    # l3
    if levels > 3:
        components[..., 9] = 4.72034871941315 * y * (0.375 * xx - 0.125 * y**2)
        components[..., 10] = 2.89061144264055 * x * y * z
        components[..., 11] = 3.65636639571573 * y * (-0.625 * xx - 0.625 * y**2 + 0.5)
        components[..., 12] = 0.373176332590115 * z * (-5.0 * xx - 5.0 * yy + 2.0)
        components[..., 13] = 0.457045799464466 * x * (-5.0 * x**2 - 5.0 * yy + 4.0)
        components[..., 14] = 1.44530572132028 * z * (xx - yy)
        components[..., 15] = 0.590043589926644 * x * (x**2 - 3.0 * yy)

    # l4
    if levels > 4:
        components[..., 16] = 2.5033429417967 * x * y * (x**2 - y**2)
        components[..., 17] = 4.72034871941315 * y * z * (1.125 * xx - 0.375 * y**2)
        components[..., 18] = 1.26156626101008 * x * y * (-5.25 * x**2 - 5.25 * y**2 + 4.5)
        components[..., 19] = 1.78412411615277 * y * z * (-2.625 * xx - 2.625 * y**2 + 1.5)
        components[..., 20] = 3.70249414203215 * xx**2 + 7.4049882840643 * xx * yy - 4.23142187660817 * xx + 3.70249414203215 * yy**2 - 4.23142187660817 * yy + 0.846284375321634
        components[..., 21] = 0.669046543557289 * x * z * (-7.0 * x**2 - 7.0 * yy + 4.0)
        components[..., 22] = -3.31161143515146 * xx**2 + 2.83852408727268 * xx + 3.31161143515146 * yy**2 - 2.83852408727268 * yy
        components[..., 23] = 1.77013076977993 * x * z * (x**2 - 3.0 * yy)
        components[..., 24] = 0.625835735449176 * xx**2 - 3.75501441269506 * xx * yy + 0.625835735449176 * yy**2

    # l5
    if levels > 5:
        components[..., 25] = 7.00140860629515 * y * (0.46875 * xx**2 - 0.9375 * xx * y**2 + 0.09375 * y**4)
        components[..., 26] = 8.30264925952416 * x * y * z * (x**2 - y**2)
        components[..., 27] = 15.655625581928 * y * (0.84375 * xx * zz - 0.09375 * xx - 0.28125 * y**2 * zz + 0.03125 * y**2)
        components[..., 28] = 19.1741471398933 * x * y * z * (-0.75 * x**2 - 0.75 * y**2 + 0.5)
        components[..., 29] = 7.24714641913115 * y * (1.3125 * xx**2 + 2.625 * xx * y**2 - 1.75 * xx + 1.3125 * y**4 - 1.75 * y**2 + 0.5)
        components[..., 30] = 0.116950322453424 * z * (63.0 * xx**2 + 126.0 * xx * yy - 56.0 * xx + 63.0 * yy**2 - 56.0 * yy + 8.0)
        components[..., 31] = 0.452946651195697 * x * (21.0 * x**4 + 42.0 * x**2 * yy - 28.0 * x**2 + 21.0 * yy**2 - 28.0 * yy + 8.0)
        components[..., 32] = 2.39676839248666 * z * (-3.0 * xx**2 + 2.0 * xx + 3.0 * yy**2 - 2.0 * yy)
        components[..., 33] = 0.48923829943525 * x * (9.0 * x**2 * zz - x**2 - 27.0 * yy * zz + 3.0 * yy)
        components[..., 34] = 2.07566231488104 * z * (xx**2 - 6.0 * xx * yy + yy**2)
        components[..., 35] = 0.65638205684017 * x * (x**4 - 10.0 * x**2 * yy + 5.0 * yy**2)

    # l6
    if levels > 6:
        components[..., 36] = 43.7237827322825 * x * y * (0.09375 * x**4 - 0.3125 * x**2 * y**2 + 0.09375 * y**4)
        components[..., 37] = 25.243937730472 * y * z * (0.46875 * xx**2 - 0.9375 * xx * y**2 + 0.09375 * y**4)
        components[..., 38] = 5.38202560777306 * x * y * (-4.125 * x**4 + 3.75 * x**2 + 4.125 * y**4 - 3.75 * y**2)
        components[..., 39] = 29.4785683044776 * y * z * (-1.03125 * xx**2 - 0.6875 * xx * y**2 + 0.75 * xx + 0.34375 * y**4 - 0.25 * y**2)
        components[..., 40] = 29.4785683044776 * x * y * (1.03125 * x**4 + 2.0625 * x**2 * y**2 - 1.5 * x**2 + 1.03125 * y**4 - 1.5 * y**2 + 0.5)
        components[..., 41] = 9.3219418002997 * y * z * (2.0625 * xx**2 + 4.125 * xx * y**2 - 2.25 * xx + 2.0625 * y**4 - 2.25 * y**2 + 0.5)
        components[..., 42] = -14.6844857238222 * xx**3 - 44.0534571714665 * xx**2 * yy + 24.0291584571635 * xx**2 - 44.0534571714665 * xx * yy**2 + 48.0583169143271 * xx * yy - 10.6796259809616 * xx - 14.6844857238222 * yy**3 + 24.0291584571635 * yy**2 - 10.6796259809616 * yy + 1.01710723628205
        components[..., 43] = 0.582621362518731 * x * z * (33.0 * x**4 + 66.0 * x**2 * yy - 36.0 * x**2 + 33.0 * yy**2 - 36.0 * yy + 8.0)
        components[..., 44] = 15.1998867819962 * xx**3 + 15.1998867819962 * xx**2 * yy - 22.1089262283582 * xx**2 - 15.1998867819962 * xx * yy**2 + 7.36964207611939 * xx - 15.1998867819962 * yy**3 + 22.1089262283582 * yy**2 - 7.36964207611939 * yy
        components[..., 45] = 0.921205259514923 * x * z * (-11.0 * x**4 + 22.0 * x**2 * yy + 8.0 * x**2 + 33.0 * yy**2 - 24.0 * yy)
        components[..., 46] = -5.55021390801596 * xx**3 + 27.7510695400798 * xx**2 * yy + 5.04564900728724 * xx**2 + 27.7510695400798 * xx * yy**2 - 30.2738940437234 * xx * yy - 5.55021390801596 * yy**3 + 5.04564900728724 * yy**2
        components[..., 47] = 2.36661916223175 * x * z * (x**4 - 10.0 * x**2 * yy + 5.0 * yy**2)
        components[..., 48] = 0.683184105191914 * xx**3 - 10.2477615778787 * xx**2 * yy + 10.2477615778787 * xx * yy**2 - 0.683184105191914 * yy**3

    # l7
    if levels > 7:
        components[..., 49] = 15.0861382938581 * y * (0.328125 * xx**3 - 1.640625 * xx**2 * y**2 + 0.984375 * xx * y**4 - 0.046875 * y**6)
        components[..., 50] = 56.4471607851072 * x * y * z * (0.28125 * x**4 - 0.9375 * x**2 * y**2 + 0.28125 * y**4)
        components[..., 51] = 11.0701990126989 * y * (-3.046875 * xx**3 + 3.046875 * xx**2 * y**2 + 2.8125 * xx**2 + 5.484375 * xx * y**4 - 5.625 * xx * y**2 - 0.609375 * y**6 + 0.5625 * y**4)
        components[..., 52] = 11.0701990126989 * x * y * z * (-4.875 * x**4 + 3.75 * x**2 + 4.875 * y**4 - 3.75 * y**2)
        components[..., 53] = 3.33779058906227 * y * (20.109375 * xx**3 + 33.515625 * xx**2 * y**2 - 30.9375 * xx**2 + 6.703125 * xx * y**4 - 20.625 * xx * y**2 + 11.25 * xx - 6.703125 * y**6 + 10.3125 * y**4 - 3.75 * y**2)
        components[..., 54] = 4.72034871941315 * x * y * z * (13.40625 * x**4 + 26.8125 * x**2 * y**2 - 16.5 * x**2 + 13.40625 * y**4 - 16.5 * y**2 + 4.5)
        components[..., 55] = 5.78122288528111 * y * (-6.703125 * xx**3 - 20.109375 * xx**2 * y**2 + 12.375 * xx**2 - 20.109375 * xx * y**4 + 24.75 * xx * y**2 - 6.75 * xx - 6.703125 * y**6 + 12.375 * y**4 - 6.75 * y**2 + 1.0)
        components[..., 56] = 0.0682842769120049 * z * (-429.0 * xx**3 - 1287.0 * xx**2 * yy + 594.0 * xx**2 - 1287.0 * xx * yy**2 + 1188.0 * xx * yy - 216.0 * xx - 429.0 * yy**3 + 594.0 * yy**2 - 216.0 * yy + 16.0)
        components[..., 57] = 0.0903316075825173 * x * (-429.0 * x**6 - 1287.0 * x**4 * yy + 792.0 * x**4 - 1287.0 * x**2 * yy**2 + 1584.0 * x**2 * yy - 432.0 * x**2 - 429.0 * yy**3 + 792.0 * yy**2 - 432.0 * yy + 64.0)
        components[..., 58] = 0.221266346222491 * z * (143.0 * xx**3 + 143.0 * xx**2 * yy - 176.0 * xx**2 - 143.0 * xx * yy**2 + 48.0 * xx - 143.0 * yy**3 + 176.0 * yy**2 - 48.0 * yy)
        components[..., 59] = 0.156458933862294 * x * (143.0 * x**6 - 143.0 * x**4 * yy - 220.0 * x**4 - 715.0 * x**2 * yy**2 + 440.0 * x**2 * yy + 80.0 * x**2 - 429.0 * yy**3 + 660.0 * yy**2 - 240.0 * yy)
        components[..., 60] = 1.03783115744052 * z * (-13.0 * xx**3 + 65.0 * xx**2 * yy + 10.0 * xx**2 + 65.0 * xx * yy**2 - 60.0 * xx * yy - 13.0 * yy**3 + 10.0 * yy**2)
        components[..., 61] = 0.51891557872026 * x * (-13.0 * x**6 + 117.0 * x**4 * yy + 12.0 * x**4 + 65.0 * x**2 * yy**2 - 120.0 * x**2 * yy - 65.0 * yy**3 + 60.0 * yy**2)
        components[..., 62] = 2.6459606618019 * z * (xx**3 - 15.0 * xx**2 * yy + 15.0 * xx * yy**2 - yy**3)
        components[..., 63] = 0.707162732524596 * x * (x**6 - 21.0 * x**4 * yy + 35.0 * x**2 * yy**2 - 7.0 * yy**3)

    # l8
    if levels > 8:
        components[..., 64] = 62.2017416682521 * x * y * (0.09375 * x**6 - 0.65625 * x**4 * y**2 + 0.65625 * x**2 * y**4 - 0.09375 * y**6)
        components[..., 65] = 62.2017416682521 * y * z * (0.328125 * xx**3 - 1.640625 * xx**2 * y**2 + 0.984375 * xx * y**4 - 0.046875 * y**6)
        components[..., 66] = 68.1385940556215 * x * y * (-0.703125 * x**6 + 1.640625 * x**4 * y**2 + 0.65625 * x**4 + 1.640625 * x**2 * y**4 - 2.1875 * x**2 * y**2 - 0.703125 * y**6 + 0.65625 * y**4)
        components[..., 67] = 73.5980932714263 * y * z * (-1.171875 * xx**3 + 1.171875 * xx**2 * y**2 + 0.9375 * xx**2 + 2.109375 * xx * y**4 - 1.875 * xx * y**2 - 0.234375 * y**6 + 0.1875 * y**4)
        components[..., 68] = 20.4124383897314 * x * y * (6.09375 * x**6 + 6.09375 * x**4 * y**2 - 9.75 * x**4 - 6.09375 * x**2 * y**4 + 3.75 * x**2 - 6.09375 * y**6 + 9.75 * y**4 - 3.75 * y**2)
        components[..., 69] = 79.0570339389148 * y * z * (1.828125 * xx**3 + 3.046875 * xx**2 * y**2 - 2.4375 * xx**2 + 0.609375 * xx * y**4 - 1.625 * xx * y**2 + 0.75 * xx - 0.609375 * y**6 + 0.8125 * y**4 - 0.25 * y**2)
        components[..., 70] = 19.4624963598895 * x * y * (-6.703125 * x**6 - 20.109375 * x**4 * y**2 + 13.40625 * x**4 - 20.109375 * x**2 * y**4 + 26.8125 * x**2 * y**2 - 8.25 * x**2 - 6.703125 * y**6 + 13.40625 * y**4 - 8.25 * y**2 + 1.5)
        components[..., 71] = 2.32621324584064 * y * z * (-33.515625 * xx**3 - 100.546875 * xx**2 * y**2 + 53.625 * xx**2 - 100.546875 * xx * y**4 + 107.25 * xx * y**2 - 24.75 * xx - 33.515625 * y**6 + 53.625 * y**4 - 24.75 * y**2 + 3.0)
        components[..., 72] = 58.4733681132208 * xx**4 + 233.893472452883 * xx**3 * yy - 124.743185308204 * xx**3 + 350.840208679325 * xx**2 * yy**2 - 374.229555924613 * xx**2 * yy + 86.3606667518337 * xx**2 + 233.893472452883 * xx * yy**3 - 374.229555924613 * xx * yy**2 + 172.721333503667 * xx * yy - 20.9359192125658 * xx + 58.4733681132208 * yy**4 - 124.743185308204 * yy**3 + 86.3606667518337 * yy**2 - 20.9359192125658 * yy + 1.16310662292032
        components[..., 73] = 0.10904124589878 * x * z * (-715.0 * x**6 - 2145.0 * x**4 * yy + 1144.0 * x**4 - 2145.0 * x**2 * yy**2 + 2288.0 * x**2 * yy - 528.0 * x**2 - 715.0 * yy**3 + 1144.0 * yy**2 - 528.0 * yy + 64.0)
        components[..., 74] = -65.2297729561921 * xx**4 - 130.459545912384 * xx**3 * yy + 130.459545912384 * xx**3 + 130.459545912384 * xx**2 * yy - 80.2827974845441 * xx**2 + 130.459545912384 * xx * yy**3 - 130.459545912384 * xx * yy**2 + 14.5968722699171 * xx + 65.2297729561921 * yy**4 - 130.459545912384 * yy**3 + 80.2827974845441 * yy**2 - 14.5968722699171 * yy
        components[..., 75] = 1.23526615529554 * x * z * (39.0 * x**6 - 39.0 * x**4 * yy - 52.0 * x**4 - 195.0 * x**2 * yy**2 + 104.0 * x**2 * yy + 16.0 * x**2 - 117.0 * yy**3 + 156.0 * yy**2 - 48.0 * yy)
        components[..., 76] = 31.0970741093565 * xx**4 - 124.388296437426 * xx**3 * yy - 49.7553185749704 * xx**3 - 310.970741093565 * xx**2 * yy**2 + 248.776592874852 * xx**2 * yy + 19.1366609903732 * xx**2 - 124.388296437426 * xx * yy**3 + 248.776592874852 * xx * yy**2 - 114.819965942239 * xx * yy + 31.0970741093565 * yy**4 - 49.7553185749704 * yy**3 + 19.1366609903732 * yy**2
        components[..., 77] = 3.44991062209811 * x * z * (-5.0 * x**6 + 45.0 * x**4 * yy + 4.0 * x**4 + 25.0 * x**2 * yy**2 - 40.0 * x**2 * yy - 25.0 * yy**3 + 20.0 * yy**2)
        components[..., 78] = -7.98499149089314 * xx**4 + 111.789880872504 * xx**3 * yy + 7.4526587248336 * xx**3 - 111.789880872504 * xx**2 * yy - 111.789880872504 * xx * yy**3 + 111.789880872504 * xx * yy**2 + 7.98499149089314 * yy**4 - 7.4526587248336 * yy**3
        components[..., 79] = 2.91570664069932 * x * z * (x**6 - 21.0 * x**4 * yy + 35.0 * x**2 * yy**2 - 7.0 * yy**3)
        components[..., 80] = 0.72892666017483 * xx**4 - 20.4099464848952 * xx**3 * yy + 51.0248662122381 * xx**2 * yy**2 - 20.4099464848952 * xx * yy**3 + 0.72892666017483 * yy**4

    # l9
    if levels > 9:
        components[..., 81] = 383.437287348832 * y * (0.017578125 * xx**4 - 0.1640625 * xx**3 * y**2 + 0.24609375 * xx**2 * y**4 - 0.0703125 * xx * y**6 + 0.001953125 * y**8)
        components[..., 82] = 271.131106044134 * x * y * z * (0.09375 * x**6 - 0.65625 * x**4 * y**2 + 0.65625 * x**2 * y**4 - 0.09375 * y**6)
        components[..., 83] = 92.9972021493851 * y * (-0.697265625 * xx**4 + 2.7890625 * xx**3 * y**2 + 0.65625 * xx**3 + 1.39453125 * xx**2 * y**4 - 3.28125 * xx**2 * y**2 - 1.9921875 * xx * y**6 + 1.96875 * xx * y**4 + 0.099609375 * y**8 - 0.09375 * y**6)
        components[..., 84] = 161.075879084489 * x * y * z * (-0.796875 * x**6 + 1.859375 * x**4 * y**2 + 0.65625 * x**4 + 1.859375 * x**2 * y**4 - 2.1875 * x**2 * y**2 - 0.796875 * y**6 + 0.65625 * y**4)
        components[..., 85] = 41.5896131446629 * y * (4.98046875 * xx**4 - 8.203125 * xx**3 - 13.9453125 * xx**2 * y**4 + 8.203125 * xx**2 * y**2 + 3.28125 * xx**2 - 7.96875 * xx * y**6 + 14.765625 * xx * y**4 - 6.5625 * xx * y**2 + 0.99609375 * y**8 - 1.640625 * y**6 + 0.65625 * y**4)
        components[..., 86] = 173.981834185778 * x * y * z * (1.59375 * x**6 + 1.59375 * x**4 * y**2 - 2.25 * x**4 - 1.59375 * x**2 * y**4 + 0.75 * x**2 - 1.59375 * y**6 + 2.25 * y**4 - 0.75 * y**2)
        components[..., 87] = 118.197381124146 * y * (-2.58984375 * xx**4 - 6.90625 * xx**3 * y**2 + 5.484375 * xx**3 - 5.1796875 * xx**2 * y**4 + 9.140625 * xx**2 * y**2 - 3.65625 * xx**2 + 1.828125 * xx * y**4 - 2.4375 * xx * y**2 + 0.75 * xx + 0.86328125 * y**8 - 1.828125 * y**6 + 1.21875 * y**4 - 0.25 * y**2)
        components[..., 88] = 25.7927831403306 * x * y * z * (-10.359375 * x**6 - 31.078125 * x**4 * y**2 + 18.28125 * x**4 - 31.078125 * x**2 * y**4 + 36.5625 * x**2 * y**2 - 9.75 * x**2 - 10.359375 * y**6 + 18.28125 * y**4 - 9.75 * y**2 + 1.5)
        components[..., 89] = 5.49903984232339 * y * (28.48828125 * xx**4 + 113.953125 * xx**3 * y**2 - 67.03125 * xx**3 + 170.9296875 * xx**2 * y**4 - 201.09375 * xx**2 * y**2 + 53.625 * xx**2 + 113.953125 * xx * y**6 - 201.09375 * xx * y**4 + 107.25 * xx * y**2 - 16.5 * xx + 28.48828125 * y**8 - 67.03125 * y**6 + 53.625 * y**4 - 16.5 * y**2 + 1.5)
        components[..., 90] = 0.00960642726438659 * z * (12155.0 * xx**4 + 48620.0 * xx**3 * yy - 22880.0 * xx**3 + 72930.0 * xx**2 * yy**2 - 68640.0 * xx**2 * yy + 13728.0 * xx**2 + 48620.0 * xx * yy**3 - 68640.0 * xx * yy**2 + 27456.0 * xx * yy - 2816.0 * xx + 12155.0 * yy**4 - 22880.0 * yy**3 + 13728.0 * yy**2 - 2816.0 * yy + 128.0)
        components[..., 91] = 0.0644418731522273 * x * (2431.0 * x**8 + 9724.0 * x**6 * yy - 5720.0 * x**6 + 14586.0 * x**4 * yy**2 - 17160.0 * x**4 * yy + 4576.0 * x**4 + 9724.0 * x**2 * yy**3 - 17160.0 * x**2 * yy**2 + 9152.0 * x**2 * yy - 1408.0 * x**2 + 2431.0 * yy**4 - 5720.0 * yy**3 + 4576.0 * yy**2 - 1408.0 * yy + 128.0)
        components[..., 92] = 0.604518354851498 * z * (-221.0 * xx**4 - 442.0 * xx**3 * yy + 390.0 * xx**3 + 390.0 * xx**2 * yy - 208.0 * xx**2 + 442.0 * xx * yy**3 - 390.0 * xx * yy**2 + 32.0 * xx + 221.0 * yy**4 - 390.0 * yy**3 + 208.0 * yy**2 - 32.0 * yy)
        components[..., 93] = 0.461708520016194 * x * (-221.0 * x**8 + 468.0 * x**6 + 1326.0 * x**4 * yy**2 - 468.0 * x**4 * yy - 312.0 * x**4 + 1768.0 * x**2 * yy**3 - 2340.0 * x**2 * yy**2 + 624.0 * x**2 * yy + 64.0 * x**2 + 663.0 * yy**4 - 1404.0 * yy**3 + 936.0 * yy**2 - 192.0 * yy)
        components[..., 94] = 4.07769923872917 * z * (17.0 * xx**4 - 68.0 * xx**3 * yy - 24.0 * xx**3 - 170.0 * xx**2 * yy**2 + 120.0 * xx**2 * yy + 8.0 * xx**2 - 68.0 * xx * yy**3 + 120.0 * xx * yy**2 - 48.0 * xx * yy + 17.0 * yy**4 - 24.0 * yy**3 + 8.0 * yy**2)
        components[..., 95] = 0.487378279039019 * x * (85.0 * x**8 - 680.0 * x**6 * yy - 140.0 * x**6 - 1190.0 * x**4 * yy**2 + 1260.0 * x**4 * yy + 56.0 * x**4 + 700.0 * x**2 * yy**2 - 560.0 * x**2 * yy + 425.0 * yy**4 - 700.0 * yy**3 + 280.0 * yy**2)
        components[..., 96] = 1.25840530534757 * z * (-17.0 * xx**4 + 238.0 * xx**3 * yy + 14.0 * xx**3 - 210.0 * xx**2 * yy - 238.0 * xx * yy**3 + 210.0 * xx * yy**2 + 17.0 * yy**4 - 14.0 * yy**3)
        components[..., 97] = 0.544905481344053 * x * (-17.0 * x**8 + 340.0 * x**6 * yy + 16.0 * x**6 - 238.0 * x**4 * yy**2 - 336.0 * x**4 * yy - 476.0 * x**2 * yy**3 + 560.0 * x**2 * yy**2 + 119.0 * yy**4 - 112.0 * yy**3)
        components[..., 98] = 3.1773176489547 * z * (xx**4 - 28.0 * xx**3 * yy + 70.0 * xx**2 * yy**2 - 28.0 * xx * yy**3 + yy**4)
        components[..., 99] = 0.748900951853188 * x * (x**8 - 36.0 * x**6 * yy + 126.0 * x**4 * yy**2 - 84.0 * x**2 * yy**3 + 9.0 * yy**4)

    return components


def main():
    levels = 10

    height = 100
    width = 150

    theta = torch.linspace(-torch.pi, torch.pi, width)
    phi = torch.linspace(0, torch.pi, height)
    [theta, phi] = torch.meshgrid(theta, phi, indexing="xy")

    directions = torch.stack([torch.cos(theta) * torch.sin(phi), torch.sin(theta) * torch.sin(phi), torch.cos(phi)], dim=-1)

    encoded_values = components_from_spherical_harmonics(levels, directions)
    encoded_values = torch.moveaxis(encoded_values, 2, 0)

    max_number_images = (levels - 1) * 2 + 1
    fig = plt.figure(figsize=(max_number_images, levels))
    axes = fig.subplots(levels, max_number_images)
    for l in range(levels):
        i0 = l**2
        i1 = (l + 1) ** 2
        images = encoded_values[i0:i1]
        images = images.reshape((-1, height, width))
        images = images.detach().cpu().numpy()

        # subtitles
        axes[l, 0].set_title(f"Level: {l+1}")

        # images
        num = len(images)
        for i in range(max_number_images):
            if 0 <= i < (max_number_images - num) // 2:
                axes[l, i].axis("off")
            elif (max_number_images - num) // 2 <= i < (max_number_images + num) // 2:
                axes[l, i].imshow(images[i - (max_number_images - num) // 2], cmap="plasma")
                axes[l, i].axis("off")
            else:
                axes[l, i].axis("off")

    plt.savefig("docs/sh_encoder_levels10.pdf", bbox_inches="tight")
    plt.show()


if __name__ == "__main__":
    main()
